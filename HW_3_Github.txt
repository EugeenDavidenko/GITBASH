1. На локальном репозитории сделать ветки для:
- Postman
 git branch Postman

- Jmeter
git branch Jmeter

- CheckLists
git branch CheckLists

- Bag Reports
git branch Bug_Reports

- SQL
git branch SQL

- Charles
git branch Charles

- Mobile testing
git branch Mobile_testing

git checkout -b название_ветки - создать и перейти в ветку
git checkout название_ветки - переход в ветку

2. Запушить все ветки на внешний репозиторий
git push -u origin Postman
git push -u origin Jmeter
git push -u origin Checklists
git push -u origin Bug_Reports
git push -u origin SQL
git push -u origin Charles
git push -u origin Mobile_testing

или

git push -u origin --all

3. В ветке Bug_Reports сделать текстовый документ со структурой баг репорта
touch Bugreport_structure.txt --> vim Bugreport_structure.txt -->ESC:wq

		СТРУКТУРА БАГРЕПОРТА:

TITLE/SUMMARY-котрокое описание проблемы, явно указывающее на причину и тип ошибочной ситуации.

PROJECT-название тестируемого проекта.

COMPONENT-название части или функции тетструемого продукта.
VERSION-версия продукта на которо найдена ошибка.
SEVERITY(СЕРЬЕЗНОСТЬ):
	S1 блокирующий (blocker)
	S2 Критический (Critical)
	S3 Значительный (Major)
	S4 Незначительный (Minor)
	S5 Тривиальный (Trivial)
PRYORITY(ПРИОРИТЕТ):
	P1 Высокий (hight)
	P2 Средний (Medium)
	P3 Низкий (low)
STATUS(СТАТУС)-зависит от используемой процедуры и жизненного цикла.
AUTHOR-создатель баг-репорта.
ASSIGNET TO-сотрудник, назначенный на решение проблемы.
ОКРУЖЕНИЕ-операционная сиситема, сервиспак, для web-приложений-имя и версия браузера, и т.д.
STEPS-шаги, по которым можно легко воспроизвести ситуацию.
ФАКТИЧЕСКИЙ РЕЗУЛЬТАТ-результат полученный после воспроизведения шагов.
ОЖИДАЕМЫЙ РЕЗУЛЬТАТ-ожидаемый правильный результат.
ATTACHMENT-файл с логами, скриншот, любой другой документ который поможет установить причину ошибки или указать на способ решения проблемы.

4. Запушить структуру багрепорта на внешний репозиторий
git status --> git add Bugreport_structure.txt -->git commit -m "создал и заполнил Bugreport_structure.txt" --> git push

5. Вмержить ветку Bag Reports в Main
git checkout main ---> git merge Bug_Reports

6. Запушить main на внешний репозиторий.
git status --> git push

7. В ветке CheckLists набросать структуру чек листа.
touch Checklist_structure.txt --> vim Checklist_structure.txt --> I --> вносим изменения --> ESC:wq

		СТРУКТУРА ЧЕКЛИСТА:

1. Название чеклиста (краткое описание)
2. Список проверок.
3. Для проверки из списка указать :
  - приоритет
  - фактический результат
  - ожидаемый результат
  - статус проверки ( успешно, неуспешно, в процессе)

8. Запушить структуру на внешний репозиторий
git status --> git add Checklist_structure.txt --> git commit -m "add Checklist_structure.txt" -->  git push

9. На внешнем репозитории сделать Pull Request ветки CheckLists в main
На  github находим нужный репозиторий, там находим "Compare & pull request" --> выставляем нужные ветки main и CheckLists --> по необходимости оставляем комментарий --> Create pull request --> на вкладке Files changed проверяем изменения -->  Merge pull request --> проверяем на ветке main

10. Синхронизировать Внешнюю и Локальную ветки Main
в gitbash в нужном репе git checkout main --> git fetch --> git pull

